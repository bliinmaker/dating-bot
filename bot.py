import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import config
import models
from models import Session
from user_service import UserService
from profile_service import ProfileService
from matching_service import MatchingService
import io
from telegram.error import BadRequest
from matching_service import preload_profiles

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, config.LOG_LEVEL)
)
logger = logging.getLogger(__name__)

START = 0
REGISTER_NAME = 1
REGISTER_AGE = 2
REGISTER_GENDER = 3
REGISTER_BIO = 4
REGISTER_LOCATION = 5
REGISTER_INTERESTS = 6
REGISTER_PREFERRED_GENDER = 7
REGISTER_PREFERRED_AGE = 8
REGISTER_PREFERRED_LOCATION = 9
UPLOAD_PHOTO = 10
BROWSING = 20
VIEWING_PROFILE = 21
VIEWING_MATCHES = 22
CHATTING = 23
EDIT_PROFILE = 30
EDIT_NAME = 31
EDIT_AGE = 32
EDIT_BIO = 33
EDIT_LOCATION = 34
EDIT_INTERESTS = 35
EDIT_PREFERRED_GENDER = 36
EDIT_PREFERRED_AGE = 37
EDIT_PREFERRED_LOCATION = 38
DIRECT_EDIT_AGE_RANGE = 100
DIRECT_EDIT_LOCATION = 101
user_states = {}

user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    user_id = update.effective_user.id
    username = update.effective_user.username

    session = Session()
    try:
        user = UserService.get_or_create_user(session, user_id, username)

        user_profile = UserService.get_user_profile(session, user_id)

        if user_profile and user_profile.get("has_profile"):
            await show_main_menu(update, context)
            context.user_data['state'] = BROWSING
            user_states[user_id] = BROWSING
        else:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dating Bot!\n"
                "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –ø–∞—Ä—É."
            )
            await start_registration(update, context)
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the registration process"""
    user_id = update.effective_user.id

    user_data[user_id] = {}
    context.user_data['profile_data'] = {}

    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    user_states[user_id] = REGISTER_NAME
    context.user_data['state'] = REGISTER_NAME


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show the main menu"""
    user_id = update.effective_user.id

    keyboard = [
        [KeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")],
        [KeyboardButton("‚ù§Ô∏è –ú–æ–∏ –ø–∞—Ä—ã"), KeyboardButton("üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )

    sync_user_state(user_id, context, BROWSING)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle photo upload"""
    user_id = update.effective_user.id

    if update.message.photo:
        photo = update.message.photo[-1]
        file_id = photo.file_id

        session = Session()
        try:
            user = UserService.get_or_create_user(session, user_id)

            profile_service = ProfileService()

            user_profile = UserService.get_user_profile(session, user_id)

            if not user_profile or not user_profile.get("has_profile"):
                profile_data = user_data.get(user_id, {})
                if not profile_data and 'profile_data' in context.user_data:
                    profile_data = context.user_data['profile_data']

                profile = profile_service.create_profile(session, user.id, profile_data)

                if not profile:
                    await update.message.reply_text(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
                    )
                    return

                profile_id = profile.id
            else:
                profile_id = user_profile["profile_id"]

            photo_file = await context.bot.get_file(photo.file_id)
            photo_bytes = io.BytesIO()
            await photo_file.download_to_memory(photo_bytes)
            photo_bytes.seek(0)

            s3_path = profile_service.add_photo(
                session,
                profile_id,
                photo_bytes.getvalue(),
                telegram_file_id=file_id,
                is_main=True
            )

            if s3_path:
                if user_id in user_data:
                    del user_data[user_id]
                if 'profile_data' in context.user_data:
                    context.user_data.pop('profile_data', None)

                if context.user_data['state'] == UPLOAD_PHOTO and user_profile and user_profile.get("has_profile"):
                    await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    await show_my_profile(update, context)
                else:
                    await update.message.reply_text(
                        "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—ã."
                    )
                    await show_main_menu(update, context)
                    user_states[user_id] = BROWSING
                    context.user_data['state'] = BROWSING

                    preload_profiles.delay(user.id)
            else:
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
        except Exception as e:
            logger.error(f"Error handling photo upload: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
        finally:
            session.close()
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button clicks"""
    query = update.callback_query
    user_id = query.from_user.id

    if 'state' not in context.user_data:
        session = Session()
        try:
            user_profile = UserService.get_user_profile(session, user_id)
            if user_profile and user_profile.get("has_profile"):
                state = user_states.get(user_id, BROWSING)
                context.user_data['state'] = state
                logger.info(f"Recovered state for user {user_id}: {state}")
            else:
                await query.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
                return
        except Exception as e:
            logger.error(f"Error recovering state in handle_button: {e}")
        finally:
            session.close()

    await query.answer()

    if query.data.startswith("init_chat_"):
        await show_matches(update, context)
        return

    if query.data in ["match_next", "match_prev"]:
        await show_matches(update, context)
        return
    elif query.data == "back_to_menu":
        await show_main_menu(update, context)
        sync_user_state(user_id, context, BROWSING)
        return
    elif query.data == "match_count":
        return

    if query.data.startswith("like_") or query.data.startswith("skip_"):
        action, profile_id = query.data.split("_")
        await handle_profile_action(update, context, action, int(profile_id))
    elif query.data == "no_username":
        await query.answer(
            "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username –≤ Telegram. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—â–µ–Ω–∏—è.")
    elif query.data == "continue_browsing":
        await show_next_profile(update, context)
    elif query.data == "edit_profile":
        await show_edit_profile_menu(update, context)
    elif query.data.startswith("edit_field_"):
        field = query.data.split("_")[2]
        await handle_edit_field_selection(update, context, field)
    elif query.data == "edit_age_range":
        await direct_edit_age_range(update, context)
    elif query.data == "edit_location_pref":
        await direct_edit_location_pref(update, context)
    elif query.data == "add_photo":
        await context.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        sync_user_state(user_id, context, UPLOAD_PHOTO)
    elif query.data == "edit_preferences":
        await show_edit_profile_menu(update, context)
    elif query.data == "back_to_profile":
        await show_my_profile(update, context)
    else:
        await context.bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle name input"""
    user_id = update.effective_user.id
    name = update.message.text.strip()

    if len(name) < 2:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    user_data[user_id]["name"] = name
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["name"] = name

    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    user_states[user_id] = REGISTER_AGE
    context.user_data['state'] = REGISTER_AGE


async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle age input"""
    user_id = update.effective_user.id
    text = update.message.text.strip()

    try:
        age = int(text)
        if age < 18 or age > 100:
            await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        user_data[user_id]["age"] = age
        if 'profile_data' in context.user_data:
            context.user_data['profile_data']["age"] = age

        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=reply_markup)
        user_states[user_id] = REGISTER_GENDER
        context.user_data['state'] = REGISTER_GENDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")


async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle gender input"""
    user_id = update.effective_user.id
    gender = update.message.text.strip()

    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)
        return

    user_data[user_id]["gender"] = gender
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["gender"] = gender

    if gender == "–ú—É–∂—Å–∫–æ–π":
        user_data[user_id]["preferred_gender"] = "–ñ–µ–Ω—Å–∫–∏–π"
        if 'profile_data' in context.user_data:
            context.user_data['profile_data']["preferred_gender"] = "–ñ–µ–Ω—Å–∫–∏–π"
    else:
        user_data[user_id]["preferred_gender"] = "–ú—É–∂—Å–∫–æ–π"
        if 'profile_data' in context.user_data:
            context.user_data['profile_data']["preferred_gender"] = "–ú—É–∂—Å–∫–æ–π"

    await update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–≤–∞—à–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –∏ —Ç.–¥.):"
    )
    user_states[user_id] = REGISTER_BIO
    context.user_data['state'] = REGISTER_BIO


async def handle_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle interests input"""
    user_id = update.effective_user.id
    interests_text = update.message.text.strip()

    if len(interests_text) < 3:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å:")
        return

    interests = [i.strip() for i in interests_text.split(",") if i.strip()]
    user_data[user_id]["interests"] = interests
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["interests"] = interests

    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35):"
    )
    user_states[user_id] = REGISTER_PREFERRED_AGE
    context.user_data['state'] = REGISTER_PREFERRED_AGE


async def handle_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bio input"""
    user_id = update.effective_user.id
    bio = update.message.text.strip()

    if len(bio) < 10:
        await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):")
        return

    user_data[user_id]["bio"] = bio
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["bio"] = bio

    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    user_states[user_id] = REGISTER_LOCATION
    context.user_data['state'] = REGISTER_LOCATION


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle location input"""
    user_id = update.effective_user.id
    location = update.message.text.strip()

    if len(location) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return

    user_data[user_id]["location"] = location
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["location"] = location

    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∑—ã–∫–∞, —Å–ø–æ—Ä—Ç, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è):"
    )
    user_states[user_id] = REGISTER_INTERESTS
    context.user_data['state'] = REGISTER_INTERESTS


async def handle_preferred_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle preferred gender input"""
    user_id = update.effective_user.id
    preferred_gender = update.message.text.strip()

    if preferred_gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–õ—é–±–æ–π"]:
        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"), KeyboardButton("–õ—é–±–æ–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)
        return

    if preferred_gender == "–õ—é–±–æ–π":
        preferred_gender = None

    user_data[user_id]["preferred_gender"] = preferred_gender
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["preferred_gender"] = preferred_gender

    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35):"
    )
    user_states[user_id] = REGISTER_PREFERRED_AGE
    context.user_data['state'] = REGISTER_PREFERRED_AGE


async def handle_preferred_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle preferred age input"""
    user_id = update.effective_user.id
    age_range = update.message.text.strip()

    try:
        if "-" in age_range:
            min_age, max_age = map(int, age_range.split("-"))

            if min_age < 18 or max_age > 100 or min_age > max_age:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç):"
                )
                return

            user_data[user_id]["preferred_age_min"] = min_age
            user_data[user_id]["preferred_age_max"] = max_age
            if 'profile_data' in context.user_data:
                context.user_data['profile_data']["preferred_age_min"] = min_age
                context.user_data['profile_data']["preferred_age_max"] = max_age
        else:
            age = int(age_range)
            if age < 18 or age > 100:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç):"
                )
                return

            user_data[user_id]["preferred_age_min"] = age
            user_data[user_id]["preferred_age_max"] = age
            if 'profile_data' in context.user_data:
                context.user_data['profile_data']["preferred_age_min"] = age
                context.user_data['profile_data']["preferred_age_max"] = age

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ \"–õ—é–±–æ–π\"):"
        )
        user_states[user_id] = REGISTER_PREFERRED_LOCATION
        context.user_data['state'] = REGISTER_PREFERRED_LOCATION
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35) –∏–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ:"
        )


async def handle_preferred_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle preferred location input"""
    user_id = update.effective_user.id
    preferred_location = update.message.text.strip()

    if preferred_location.lower() == "–ª—é–±–æ–π":
        preferred_location = None

    user_data[user_id]["preferred_location"] = preferred_location
    if 'profile_data' in context.user_data:
        context.user_data['profile_data']["preferred_location"] = preferred_location

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∫–µ—Ç—ã:"
    )
    user_states[user_id] = UPLOAD_PHOTO
    context.user_data['state'] = UPLOAD_PHOTO


async def handle_browsing_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle menu options when in browsing state"""
    user_id = update.effective_user.id
    text = update.message.text

    logger.info(f"Menu selection for user {user_id}: '{text}', current state: {context.user_data.get('state', 'None')}")

    if text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã":
        await show_next_profile(update, context)
    elif text == "‚ù§Ô∏è –ú–æ–∏ –ø–∞—Ä—ã":
        await show_matches(update, context)
    elif text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞":
        await show_my_profile(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        sync_user_state(user_id, context, BROWSING)

    logger.info(f"Menu handling complete, state now: {context.user_data.get('state', 'None')}")


async def handle_profile_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, profile_id: int):
    """Handle like or skip action"""
    query = update.callback_query
    user_id = query.from_user.id

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        matching_service = MatchingService()

        if action == "like":
            result = matching_service.like_profile(session, user_profile["profile_id"], profile_id)

            if result.get("is_match"):
                other_profile = session.query(models.Profile).filter_by(id=profile_id).first()

                if not other_profile:
                    logger.error(f"Could not find profile {profile_id} for match notification")
                    await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return

                other_user = session.query(models.User).join(models.Profile).filter(
                    models.Profile.id == other_profile.id).first()

                await query.answer(f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –ø–∞—Ä–∞ —Å {other_profile.name}!")

                keyboard = []

                if other_user and other_user.username:
                    keyboard = [
                        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=f"https://t.me/{other_user.username}")],
                        [InlineKeyboardButton("üëÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="continue_browsing")]
                    ]
                else:
                    keyboard = [
                        [InlineKeyboardButton("‚ö†Ô∏è –ù–µ—Ç username –¥–ª—è —Å–≤—è–∑–∏", callback_data="no_username")],
                        [InlineKeyboardButton("üëÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="continue_browsing")]
                    ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    user_id,
                    f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –ø–∞—Ä–∞! –í—ã –∏ {other_profile.name} –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É.",
                    reply_markup=reply_markup
                )

                try:
                    if other_user:
                        this_user = session.query(models.User).filter(models.User.telegram_id == user_id).first()

                        other_match_keyboard = []
                        if this_user and this_user.username:
                            other_match_keyboard = [
                                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
                                                      url=f"https://t.me/{this_user.username}")],
                                [InlineKeyboardButton("üëÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="continue_browsing")]
                            ]
                        else:
                            other_match_keyboard = [
                                [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username", callback_data="no_username")],
                                [InlineKeyboardButton("üëÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="continue_browsing")]
                            ]

                        other_match_markup = InlineKeyboardMarkup(other_match_keyboard)

                        this_user_name = user_profile["name"]

                        await context.bot.send_message(
                            other_user.telegram_id,
                            f"üì£ –£ –≤–∞—Å –Ω–æ–≤–∞—è –ø–∞—Ä–∞! {this_user_name} —Ç–∞–∫–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) –≤–∞–º –ª–∞–π–∫!",
                            reply_markup=other_match_markup
                        )
                        logger.info(f"Sent match notification to user {other_user.telegram_id}")
                except Exception as e:
                    logger.error(f"Failed to send match notification to other user: {e}")

                if "current_profiles" in context.user_data and user_id in context.user_data["current_profiles"]:
                    del context.user_data["current_profiles"][user_id]

            else:
                await query.answer("–ê–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å!")

                if "current_profiles" in context.user_data and user_id in context.user_data["current_profiles"]:
                    del context.user_data["current_profiles"][user_id]

                await show_next_profile(update, context)
        else:
            matching_service.skip_profile(session, user_profile["profile_id"], profile_id)

            await query.answer("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")

            if "current_profiles" in context.user_data and user_id in context.user_data["current_profiles"]:
                del context.user_data["current_profiles"][user_id]

            await show_next_profile(update, context)
    except Exception as e:
        logger.error(f"Error handling profile action: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")
    finally:
        session.close()


async def show_edit_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show the menu for editing profile"""
    query = update.callback_query
    user_id = query.from_user.id

    keyboard = [
        [InlineKeyboardButton("–ò–º—è", callback_data="edit_field_name")],
        [InlineKeyboardButton("–í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_field_age")],
        [InlineKeyboardButton("–û —Å–µ–±–µ", callback_data="edit_field_bio")],
        [InlineKeyboardButton("–ì–æ—Ä–æ–¥", callback_data="edit_field_location")],
        [InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="edit_field_interests")],
        [InlineKeyboardButton("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="edit_age_range")],
        [InlineKeyboardButton("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥", callback_data="edit_location_pref")],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:",
        reply_markup=reply_markup
    )

    user_states[user_id] = EDIT_PROFILE
    context.user_data['state'] = EDIT_PROFILE


async def handle_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit name input"""
    user_id = update.effective_user.id
    name = update.message.text.strip()

    if len(name) < 2:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        profile_service = ProfileService()

        result = profile_service.update_profile(
            session,
            user_profile["profile_id"],
            {"name": name}
        )

        if result:
            await update.message.reply_text(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{name}'!")
            await show_my_profile(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Error in handle_edit_name: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()
        user_states[user_id] = BROWSING
        context.user_data['state'] = BROWSING

async def handle_edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit age input"""
    user_id = update.effective_user.id
    text = update.message.text.strip()

    try:
        age = int(text)
        if age < 18 or age > 100:
            await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        session = Session()
        try:
            user_profile = UserService.get_user_profile(session, user_id)

            if not user_profile or not user_profile.get("has_profile"):
                await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                return

            profile_service = ProfileService()

            result = profile_service.update_profile(
                session,
                user_profile["profile_id"],
                {"age": age}
            )

            if result:
                await update.message.reply_text(f"–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {age}!")
                await show_my_profile(update, context)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as e:
            logger.error(f"Error in handle_edit_age: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
        finally:
            session.close()
            user_states[user_id] = BROWSING
            context.user_data['state'] = BROWSING

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")


async def handle_edit_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit bio input"""
    user_id = update.effective_user.id
    bio = update.message.text.strip()

    if len(bio) < 10:
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        profile_service = ProfileService()

        result = profile_service.update_profile(
            session,
            user_profile["profile_id"],
            {"bio": bio}
        )

        if result:
            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_my_profile(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Error in handle_edit_bio: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()
        user_states[user_id] = BROWSING
        context.user_data['state'] = BROWSING


async def handle_edit_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit location input"""
    user_id = update.effective_user.id
    location = update.message.text.strip()

    if len(location) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        profile_service = ProfileService()

        result = profile_service.update_profile(
            session,
            user_profile["profile_id"],
            {"location": location}
        )

        if result:
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{location}'!")
            await show_my_profile(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Error in handle_edit_location: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()
        user_states[user_id] = BROWSING
        context.user_data['state'] = BROWSING


async def handle_edit_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit interests input"""
    user_id = update.effective_user.id
    interests_text = update.message.text.strip()

    if len(interests_text) < 3:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å:")
        return

    interests = [i.strip() for i in interests_text.split(",") if i.strip()]

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        profile_service = ProfileService()

        result = profile_service.update_profile(
            session,
            user_profile["profile_id"],
            {"interests": interests}
        )

        if result:
            await update.message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await show_my_profile(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Error in handle_edit_interests: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()
        user_states[user_id] = BROWSING
        context.user_data['state'] = BROWSING


async def handle_edit_preferred_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit preferred gender input"""
    user_id = update.effective_user.id
    preferred_gender = update.message.text.strip()

    if preferred_gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–õ—é–±–æ–π"]:
        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"), KeyboardButton("–õ—é–±–æ–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)
        return

    if preferred_gender == "–õ—é–±–æ–π":
        preferred_gender = None

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        profile_service = ProfileService()

        result = profile_service.update_profile(
            session,
            user_profile["profile_id"],
            {"preferred_gender": preferred_gender}
        )

        if result:
            gender_display = preferred_gender if preferred_gender else "–õ—é–±–æ–π"
            await update.message.reply_text(f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{gender_display}'!")
            await show_my_profile(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Error in handle_edit_preferred_gender: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()
        user_states[user_id] = BROWSING
        context.user_data['state'] = BROWSING


async def direct_edit_age_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Direct method to edit age range preferences"""
    query = update.callback_query
    user_id = query.from_user.id

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile:
            await context.bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return

        min_age = user_profile['preferred_age_min']
        max_age = user_profile['preferred_age_max']
        current_range = f"{min_age}-{max_age}" if min_age != max_age else str(min_age)

        await context.bot.send_message(
            user_id,
            f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {current_range}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35) –∏–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ:"
        )

        user_states[user_id] = DIRECT_EDIT_AGE_RANGE
        context.user_data['state'] = DIRECT_EDIT_AGE_RANGE

    except Exception as e:
        logger.error(f"Error in direct_edit_age_range: {e}")
        await context.bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()


async def direct_edit_location_pref(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Direct method to edit location preferences"""
    query = update.callback_query
    user_id = query.from_user.id

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile:
            await context.bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return

        current_location = user_profile['preferred_location'] or "–õ—é–±–æ–π"

        await context.bot.send_message(
            user_id,
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥: {current_location}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ (–∏–ª–∏ \"–õ—é–±–æ–π\"):"
        )

        user_states[user_id] = DIRECT_EDIT_LOCATION
        context.user_data['state'] = DIRECT_EDIT_LOCATION

    except Exception as e:
        logger.error(f"Error in direct_edit_location_pref: {e}")
        await context.bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()


async def handle_direct_age_range_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle direct age range edit input"""
    user_id = update.effective_user.id
    text = update.message.text.strip()

    try:
        if "-" in text:
            min_age, max_age = map(int, text.split("-"))

            if min_age < 18 or max_age > 100 or min_age > max_age:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç):"
                )
                return

            preferred_age_min = min_age
            preferred_age_max = max_age
        else:
            age = int(text)
            if age < 18 or age > 100:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç):"
                )
                return

            preferred_age_min = age
            preferred_age_max = age

        session = Session()
        try:
            user_profile = UserService.get_user_profile(session, user_id)

            if not user_profile:
                await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
                return

            profile_service = ProfileService()

            result = profile_service.update_profile(
                session,
                user_profile["profile_id"],
                {
                    "preferred_age_min": preferred_age_min,
                    "preferred_age_max": preferred_age_max
                }
            )

            if result:
                age_display = f"{preferred_age_min}-{preferred_age_max}" if preferred_age_min != preferred_age_max else str(
                    preferred_age_min)
                await update.message.reply_text(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {age_display}!")

                await show_my_profile(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"Error updating age range: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            session.close()
            user_states[user_id] = BROWSING
            context.user_data['state'] = BROWSING

    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35) –∏–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ:"
        )


async def handle_direct_location_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle direct location preference edit input"""
    user_id = update.effective_user.id
    location = update.message.text.strip()

    preferred_location = None if location.lower() == "–ª—é–±–æ–π" else location

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile:
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return

        profile_service = ProfileService()

        result = profile_service.update_profile(
            session,
            user_profile["profile_id"],
            {
                "preferred_location": preferred_location
            }
        )

        if result:
            display_location = preferred_location or "–õ—é–±–æ–π"
            await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {display_location}!")

            await show_my_profile(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error updating preferred location: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()
        context.user_data['state'] = BROWSING


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle normal text messages based on user state"""
    user_id = update.effective_user.id
    text = update.message.text

    state = context.user_data.get('state') or user_states.get(user_id, BROWSING)
    context.user_data['state'] = state
    user_states[user_id] = state

    print(f"User {user_id} state: {state}")

    if state == REGISTER_NAME:
        await handle_name(update, context)
    elif state == REGISTER_AGE:
        await handle_age(update, context)
    elif state == REGISTER_GENDER:
        await handle_gender(update, context)
    elif state == REGISTER_BIO:
        await handle_bio(update, context)
    elif state == REGISTER_LOCATION:
        await handle_location(update, context)
    elif state == REGISTER_INTERESTS:
        await handle_interests(update, context)
    elif state == REGISTER_PREFERRED_AGE:
        await handle_preferred_age(update, context)
    elif state == REGISTER_PREFERRED_LOCATION:
        await handle_preferred_location(update, context)
    elif state == BROWSING:
        await handle_browsing_menu(update, context)
    elif state == EDIT_NAME:
        await handle_edit_name(update, context)
    elif state == EDIT_AGE:
        await handle_edit_age(update, context)
    elif state == EDIT_BIO:
        await handle_edit_bio(update, context)
    elif state == EDIT_LOCATION:
        await handle_edit_location(update, context)
    elif state == EDIT_INTERESTS:
        await handle_edit_interests(update, context)
    elif state == DIRECT_EDIT_AGE_RANGE:
        await handle_direct_age_range_edit(update, context)
    elif state == DIRECT_EDIT_LOCATION:
        await handle_direct_location_edit(update, context)
    else:
        session = Session()
        try:
            user_profile = UserService.get_user_profile(session, user_id)
            if user_profile and user_profile.get("has_profile"):
                user_states[user_id] = BROWSING
                context.user_data['state'] = BROWSING
                await update.message.reply_text("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...")
                await show_main_menu(update, context)
            else:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
                )
        except Exception as e:
            logger.error(f"Error while trying to recover user state: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
            )
        finally:
            session.close()


def sync_user_state(user_id, context, state=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    try:
        old_state = "None"
        if state is not None:
            old_state = context.user_data.get('state', 'Unknown')
            user_states[user_id] = state
            context.user_data['state'] = state
            logger.info(f"State change for user {user_id}: {old_state} -> {state}")
        elif user_id in user_states:
            old_state = context.user_data.get('state', 'Unknown')
            context.user_data['state'] = user_states[user_id]
            logger.info(f"Synced state from global to local for user {user_id}: {old_state} -> {user_states[user_id]}")
        elif 'state' in context.user_data:
            old_state = user_states.get(user_id, 'Unknown')
            user_states[user_id] = context.user_data['state']
            logger.info(f"Synced state from local to global for user {user_id}: {old_state} -> {context.user_data['state']}")
        else:
            old_state = "Unknown/None"
            user_states[user_id] = BROWSING
            context.user_data['state'] = BROWSING
            logger.info(f"Reset state to BROWSING for user {user_id} (was {old_state})")
    except Exception as e:
        logger.error(f"Error in sync_user_state for user {user_id}: {e}")
        user_states[user_id] = BROWSING
        context.user_data['state'] = BROWSING


async def handle_edit_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, field: str):
    """Handle selection of field to edit"""
    query = update.callback_query
    user_id = query.from_user.id

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await context.bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        if user_id not in user_data:
            user_data[user_id] = {}

        if field == "name":
            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {user_profile['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:"
            )
            user_states[user_id] = EDIT_NAME
            context.user_data['state'] = EDIT_NAME

        elif field == "age":
            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {user_profile['age']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"
            )
            user_states[user_id] = EDIT_AGE
            context.user_data['state'] = EDIT_AGE

        elif field == "bio":
            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{user_profile['bio']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
            )
            user_states[user_id] = EDIT_BIO
            context.user_data['state'] = EDIT_BIO

        elif field == "location":
            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {user_profile['location']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:"
            )
            user_states[user_id] = EDIT_LOCATION
            context.user_data['state'] = EDIT_LOCATION

        elif field == "interests":
            interests_str = ", ".join(user_profile['interests'])
            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests_str}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
            )
            user_states[user_id] = EDIT_INTERESTS
            context.user_data['state'] = EDIT_INTERESTS

        elif field == "preferred_age":
            min_age = user_profile['preferred_age_min']
            max_age = user_profile['preferred_age_max']
            age_range = f"{min_age}-{max_age}" if min_age != max_age else str(min_age)

            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {age_range}\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20-35):"
            )
            user_states[user_id] = EDIT_PREFERRED_AGE
            context.user_data['state'] = EDIT_PREFERRED_AGE

        elif field == "preferred_location":
            current_location = user_profile['preferred_location'] or "–õ—é–±–æ–π"
            await context.bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥: {current_location}\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ (–∏–ª–∏ \"–õ—é–±–æ–π\"):"
            )
            user_states[user_id] = EDIT_PREFERRED_LOCATION
            context.user_data['state'] = EDIT_PREFERRED_LOCATION

    except Exception as e:
        logger.error(f"Error in handle_edit_field_selection: {e}")
        await context.bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()


async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user's own profile"""
    user_id = update.effective_user.id

    logger.info(f"Showing profile for user {user_id}, current state: {context.user_data.get('state', 'None')}")

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
            )
            return

        profile_service = ProfileService()

        photos = profile_service.get_photos(session, user_profile["profile_id"])

        profile_text = (
            f"üë§ {user_profile['name']}, {user_profile['age']}\n"
            f"üìç {user_profile['location']}\n\n"
            f"{user_profile['bio']}\n\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile['interests'])}\n\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n"
            f"- –ü–æ–ª: {user_profile['preferred_gender'] or '–õ—é–±–æ–π'}\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {user_profile['preferred_age_min']}-{user_profile['preferred_age_max']}\n"
            f"- –ì–æ—Ä–æ–¥: {user_profile['preferred_location'] or '–õ—é–±–æ–π'}\n\n"
            f"–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: {int(user_profile['profile_completeness'] * 100)}%"
        )

        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="edit_profile")],
            # [InlineKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_to_send = None

        if photos and len(photos) > 0:
            main_photo = next((p for p in photos if p.get("is_main")), photos[0])

            photo_source = main_photo.get("telegram_file_id") or main_photo.get("url")

            if photo_source:
                try:
                    if hasattr(update, 'callback_query') and update.callback_query:
                        message_to_send = await update.callback_query.message.reply_photo(
                            photo_source,
                            caption=profile_text,
                            reply_markup=reply_markup
                        )
                    else:
                        message_to_send = await context.bot.send_photo(
                            user_id,
                            photo_source,
                            caption=profile_text,
                            reply_markup=reply_markup
                        )
                except Exception as e:
                    logger.error(f"Error sending photo: {e}")
                    if hasattr(update, 'callback_query') and update.callback_query:
                        message_to_send = await update.callback_query.message.reply_text(
                            profile_text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
                            reply_markup=reply_markup
                        )
                    else:
                        message_to_send = await update.message.reply_text(
                            profile_text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
                            reply_markup=reply_markup
                        )
            else:
                if hasattr(update, 'callback_query') and update.callback_query:
                    message_to_send = await update.callback_query.message.reply_text(
                        profile_text + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        reply_markup=reply_markup
                    )
                else:
                    message_to_send = await update.message.reply_text(
                        profile_text + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        reply_markup=reply_markup
                    )
        else:
            if hasattr(update, 'callback_query') and update.callback_query:
                message_to_send = await update.callback_query.message.reply_text(
                    profile_text + "\n\nüì∑ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ",
                    reply_markup=reply_markup
                )
            else:
                message_to_send = await update.message.reply_text(
                    profile_text + "\n\nüì∑ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ",
                    reply_markup=reply_markup
                )

        if message_to_send:
            context.user_data['last_profile_message'] = message_to_send.message_id

    except Exception as e:
        logger.error(f"Error showing my profile: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
    finally:
        session.close()
        sync_user_state(user_id, context, BROWSING)
        logger.info(f"Profile display completed, state set to: {context.user_data.get('state', 'None')}")


async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show the next profile to user"""
    user_id = update.effective_user.id

    logger.info(f"Showing next profile for user {user_id}, current state: {context.user_data.get('state', 'None')}")

    sync_user_state(user_id, context, VIEWING_PROFILE)

    session = Session()
    try:
        user = UserService.get_or_create_user(session, user_id)
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            message_text = "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(message_text)
            else:
                await update.message.reply_text(message_text)
            sync_user_state(user_id, context, BROWSING)
            return

        matching_service = MatchingService()

        matching_service.redis_client.delete_profile_list(user_id)

        profiles = matching_service.get_next_profiles(session, user.id, 2)

        if not profiles:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="edit_preferences")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message_text = "–£–ø—Å! –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message_text, reply_markup=reply_markup)

            sync_user_state(user_id, context, BROWSING)
            return

        profile = profiles[0]

        if "current_profiles" not in context.user_data:
            context.user_data["current_profiles"] = {}

        context.user_data["current_profiles"][user_id] = profile

        profile_service = ProfileService()
        profile_data = profile_service.get_profile(session, profile["id"])

        if not profile_data:
            message_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(message_text)
            else:
                await update.message.reply_text(message_text)

            sync_user_state(user_id, context, BROWSING)
            return

        caption = (
            f"üë§ {profile_data['name']}, {profile_data['age']}\n"
            f"üìç {profile_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"{profile_data.get('bio', '')}\n\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile_data.get('interests', []))}"
        )

        keyboard = [
            [
                InlineKeyboardButton("üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{profile['id']}"),
                InlineKeyboardButton("‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"like_{profile['id']}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        photos = profile_service.get_photos(session, profile["id"])
        photo_sent = False

        if photos and len(photos) > 0:
            main_photo = next((p for p in photos if p.get("is_main")), photos[0])

            if main_photo and "url" in main_photo and main_photo["url"]:
                try:
                    if hasattr(update, 'callback_query') and update.callback_query:
                        await update.callback_query.message.reply_photo(
                            main_photo["url"],
                            caption=caption,
                            reply_markup=reply_markup
                        )
                    else:
                        await context.bot.send_photo(
                            user_id,
                            main_photo["url"],
                            caption=caption,
                            reply_markup=reply_markup
                        )
                    photo_sent = True
                except Exception as e:
                    logger.error(f"Error sending profile photo: {e}")

        if not photo_sent:
            text = caption + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)

        sync_user_state(user_id, context, VIEWING_PROFILE)
        logger.info(f"Next profile shown, state set to: {context.user_data.get('state', 'None')}")

    except Exception as e:
        logger.error(f"Error showing next profile: {e}")
        message_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(message_text)
        else:
            await update.message.reply_text(message_text)

        sync_user_state(user_id, context, BROWSING)
    finally:
        session.close()


async def restore_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    logger.info(f"Attempting to restore session for user {user_id}")

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if user_profile and user_profile.get("has_profile"):
            sync_user_state(user_id, context, BROWSING)

            if 'current_chat' in context.user_data:
                del context.user_data['current_chat']

            if 'last_profile_message' in context.user_data:
                del context.user_data['last_profile_message']

            await update.message.reply_text("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_main_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
    except Exception as e:
        logger.error(f"Error restoring session for user {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
        )
    finally:
        session.close()


async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user's matches with pagination"""
    user_id = update.effective_user.id

    user_states[user_id] = VIEWING_MATCHES
    context.user_data['state'] = VIEWING_MATCHES

    page = context.user_data.get('matches_page', 0)

    if hasattr(update, 'callback_query') and update.callback_query:
        callback_data = update.callback_query.data
        if callback_data == "match_next":
            page += 1
        elif callback_data == "match_prev":
            page = max(0, page - 1)
        elif callback_data.startswith("init_chat_"):
            parts = callback_data.split("_")
            if len(parts) >= 3:
                match_id = int(parts[2])

                session = Session()
                try:
                    match = session.query(models.Match).filter_by(id=match_id).first()
                    if match and not match.initiated_chat:
                        match.initiated_chat = True
                        session.commit()
                        logger.info(f"Chat initiated for match {match_id} by user {user_id}")
                        await update.callback_query.answer("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—á–∞—Ç—ã–π!")

                except Exception as e:
                    logger.error(f"Error marking chat as initiated: {e}")
                    await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞.")
                finally:
                    session.close()

    context.user_data['matches_page'] = page

    session = Session()
    try:
        user_profile = UserService.get_user_profile(session, user_id)

        if not user_profile or not user_profile.get("has_profile"):
            message_text = "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.edit_text(message_text)
            else:
                await update.message.reply_text(message_text)
            sync_user_state(user_id, context, BROWSING)
            return

        matching_service = MatchingService()

        matches = matching_service.get_matches(session, user_profile["profile_id"])

        if not matches:
            message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!"
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.edit_text(message_text)
            else:
                await update.message.reply_text(message_text)
            sync_user_state(user_id, context, BROWSING)
            return

        context.user_data['matches'] = matches

        if page >= len(matches):
            page = 0
            context.user_data['matches_page'] = 0

        match = matches[page]
        other_profile = match["other_profile"]
        match_id = match["match_id"]

        profile_service = ProfileService()

        keyboard = []

        other_user = session.query(models.User).join(models.Profile).filter(
            models.Profile.id == other_profile.get('id')).first()

        if other_user and other_user.username:
            keyboard.append([
                InlineKeyboardButton(
                    "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
                    url=f"https://t.me/{other_user.username}"
                )
            ])

            if not match.get("initiated_chat", False):
                keyboard.append([
                    InlineKeyboardButton(
                        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç—ã–º",
                        callback_data=f"init_chat_{match_id}"
                    )
                ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    "‚ö†Ô∏è –ù–µ—Ç username –¥–ª—è —Å–≤—è–∑–∏",
                    callback_data="no_username"
                )
            ])

        navigation_buttons = []

        if page > 0:
            navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="match_prev"))

        navigation_buttons.append(InlineKeyboardButton(f"{page + 1}/{len(matches)}", callback_data="match_count"))

        if page < len(matches) - 1:
            navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="match_next"))

        keyboard.append(navigation_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)

        chat_status = "‚úÖ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç" if match.get("initiated_chat", False) else "‚è≥ –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞—á–∞—Ç"

        name = other_profile.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        age = other_profile.get('age', '')
        location = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        if 'location' in other_profile:
            location = other_profile['location']
        else:
            try:
                full_profile = profile_service.get_profile(session, other_profile.get('id'))
                if full_profile and 'location' in full_profile:
                    location = full_profile.get('location')
            except Exception as e:
                logger.error(f"Error fetching full profile: {e}")

        match_text = (
            f"üë§ {name}, {age}\n"
            f"üìç {location}\n"
            f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match['created_at'].split('T')[0]}\n"
            f"{chat_status}"
        )

        photo_sent = False

        try:
            photos = profile_service.get_photos(session, other_profile.get('id'))

            if photos and len(photos) > 0:
                main_photo = next((p for p in photos if p.get("is_main")), photos[0])

                if main_photo and "url" in main_photo and main_photo["url"]:
                    if hasattr(update, 'callback_query') and update.callback_query:
                        try:
                            await update.callback_query.message.delete()
                            await context.bot.send_photo(
                                user_id,
                                main_photo["url"],
                                caption=match_text,
                                reply_markup=reply_markup
                            )
                        except Exception as e:
                            logger.error(f"Error updating match photo: {e}")
                            await context.bot.send_photo(
                                user_id,
                                main_photo["url"],
                                caption=match_text,
                                reply_markup=reply_markup
                            )
                    else:
                        await context.bot.send_photo(
                            user_id,
                            main_photo["url"],
                            caption=match_text,
                            reply_markup=reply_markup
                        )
                    photo_sent = True
        except Exception as e:
            logger.error(f"Error processing match photo: {e}")

        if not photo_sent:
            text = match_text + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

            if hasattr(update, 'callback_query') and update.callback_query:
                try:
                    await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error updating match text: {e}")
                    await context.bot.send_message(user_id, text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)

        sync_user_state(user_id, context, VIEWING_MATCHES)

    except Exception as e:
        logger.error(f"Error showing matches: {e}")
        message_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."

        if hasattr(update, 'callback_query') and update.callback_query:
            try:
                await update.callback_query.message.edit_text(message_text)
            except:
                await context.bot.send_message(user_id, message_text)
        else:
            await update.message.reply_text(message_text)

        sync_user_state(user_id, context, BROWSING)
    finally:
        session.close()


async def check_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    local_state = context.user_data.get('state', 'Not set')
    global_state = user_states.get(user_id, 'Not set')

    state_info = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:\n"
        f"- –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {local_state}\n"
        f"- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {global_state}\n"
    )

    await update.message.reply_text(state_info)
    logger.info(f"State check for user {user_id}: local={local_state}, global={global_state}")


def get_user_state(user_id, context):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    state = context.user_data.get('state')

    if state is None:
        state = user_states.get(user_id)

    if state is None:
        state = BROWSING
        user_states[user_id] = state
        context.user_data['state'] = state
        logger.info(f"Recovered missing state for user {user_id}, setting to BROWSING")
    else:
        user_states[user_id] = state
        context.user_data['state'] = state

    return state


def main():
    """Start the bot"""
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("restore", restore_session))
    application.add_handler(CommandHandler("state", check_state))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_button))

    application.add_error_handler(error_handler)

    logger.info("Dating Bot is starting")

    application.run_polling()

    logger.info("Dating Bot stopped")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        error = context.error

        logger.error(f"Exception while handling an update: {error}", exc_info=context.error)

        user_id = None
        if update.effective_user:
            user_id = update.effective_user.id

        if isinstance(error, BadRequest) and "message to edit not found" in str(error).lower():
            return

        if user_id:
            await context.bot.send_message(
                user_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
            )
    except Exception as e:
        logger.error(f"Error in error handler: {e}")


if __name__ == "__main__":
    main()